import { processTest, populateTransaction } from "./test.fixture";

const contractName = "TransparentUpgradeableProxy"; // <= Name of the smart contract

const testLabel = "eth_add_new_validator"; // <= Name of the test
const testDirSuffix = "eth_new_validator"; // <= directory to compare device snapshots to
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0x46ddc39e780088b1b146aba8cbbe15dc321a1a1d"; // <= Address of the smart contract
const chainID = 1;

const inputData = "0x60ec52160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003086ba07b84fbbc02640f035618c61c27780d749bd6f2f4743dd03bf69cd3673f94042c2c59ad4bfeff2cad5959127e22f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060aab15cce35e4cf71fd1b28a212d8bac446c78193175e894e206da4a890680a9a1c2d2b0e492df674d9c7625a52a1969a028503fed079a9f5d46fdfbf63e4c0548112c42692cfdaa9a08e45a9b4acd74860906bd34ff7ce23ef2b1c8e68625d1d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000309506eba76c56fa941904140efa7c723e95cf5d48bfe929a181a771a5200eb4847006c1324d8087cf946119bb6650a3820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609166116b3a52c5de4f3a89b3a3fd03f96c1e72b50e5df00c669a3ed3d642ab067e727b521c693849bf7eb2d1e270664714a866c4c174e33032048fdc64d6aea5545ae2741e838b284010271de3dd03baab83c014dbffe384bbbb8d464d19aff8";
// Create serializedTx and remove the "0x" prefix
const value = "3.1";
const serializedTx = populateTransaction(contractAddr, inputData, chainID, value);
const devices = [
   {
     name: "nanos",
     label: "Nano S",
     steps: 12, // <= Define the number of steps for this test case and this device
   },
  {
    name: "nanox",
    label: "Nano X",
    steps: 7, // <= Define the number of steps for this test case and this device
  },
  {
     name: "nanosp",
     label: "Nano S+",
     steps: 7, // <= Define the number of steps for this test case and this device
   },
];

devices.forEach((device) =>
  processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
